{"version":3,"sources":["lib/sudoku.js","componenets/SudokuField.js","componenets/Timer.js","componenets/Result.js","componenets/SudokuBoard.js","App.js","serviceWorker.js","index.js"],"names":["generateSudoku","fromUrl","match","document","location","search","JSON","parse","atob","extractUrlData","raw","generator","makepuzzle","rawSolution","solvepuzzle","formatted","map","e","result","rows","solution","startTime","Date","solvedTime","challengerStartTime","challengerSolvedTime","i","row","cols","index","j","value","col","readonly","push","SudokuBoard","handleChange","parseInt","target","_this","props","onChange","Object","objectSpread","field","this","react_default","a","createElement","className","readOnly","Component","Timer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","elapsed","_this2","interval","setInterval","setState","Math","floor","getTime","start","Result","sudoku","opponent","href","shareUrl","_this$props","Timer_Timer","Result_Result","key","SudokuField_SudokuBoard","App","produce","candidate","flat","length","checkSolution","data","query","btoa","stringify","replace","concat","solveSudoku","forEach","checkSudoku","SudokuBoard_SudokuBoard","onClick","Boolean","window","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afff684e.chunk.js","sourcesContent":["import generator from \"sudoku\";\n\n/*\n  Generates a sudoku with the structure\n\n  {rows: [{index: 0, cols: [{row: 0, col: 0, value: 1, readonly: true}, ...]}, ...]}\n\n*/\nexport function generateSudoku() {\n  const fromUrl = extractUrlData();\n  const raw = fromUrl ? fromUrl.raw : generator.makepuzzle();\n  const rawSolution = generator.solvepuzzle(raw);\n  \n  const formatted = raw.map(e => (e === null ? null : e + 1));\n  const formattedSolution = rawSolution.map(e => e + 1);\n  \n  const result = {\n    raw,\n    formatted,\n    rows: [], \n    solution: formattedSolution,\n    startTime: new Date(),\n    solvedTime: null,\n    challengerStartTime: fromUrl && fromUrl.startTime,\n    challengerSolvedTime: fromUrl && fromUrl.solvedTime\n  };\n  \n  for (let i=0; i<9; i++) {\n    const row = {cols: [], index: i}\n    for (let j=0; j<9; j++) {\n      const value = formatted[i*9+j]\n      const col = {\n        row: i,\n        col: j,\n        value: value,\n        readonly: value !== null\n      };\n      row.cols.push(col);\n    }\n    result.rows.push(row)\n  }\n  \n  return result;\n}\n  \nexport function checkSolution(sudoku) {\n  const candidate = sudoku.rows\n    .map(row => row.cols.map(col => col.value))\n    .flat();\n  \n  for (let i=0; i<candidate.length; i++) {\n    if (candidate[i] === null || candidate[i] !== sudoku.solution[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function shareUrl(sudoku) {\n  const data = {\n    raw: sudoku.raw,\n    startTime: sudoku.startTime,\n    solvedTime: sudoku.solvedTime\n  };\n  const query = btoa(JSON.stringify(data));\n\n  return document.location.href.replace(/\\?.+$/, \"\") + `?sudoku=${query}`;\n}\n\nfunction extractUrlData() {\n  const match = document.location.search.match(/sudoku=([^&]+)/);\n  if (match) {\n    return JSON.parse(atob(match[1]));\n  }\n  return null;\n}","import React, { Component } from \"react\"\n\nexport default class SudokuBoard extends Component {\n    handleChange = e => {\n        const value = value === \"\" ? null : parseInt(e.target.value, 10);\n\n        this.props.onChange({...this.props.field, value: value});\n    }\n\n    render() {\n        const { field } = this.props;\n        return (\n            <input\n                className=\"field\"\n                value={field.value || \"\"}\n                readOnly={field.readonly}\n                onChange={this.handleChange}\n            />\n        );\n    }\n}","import React, { Component } from \"react\"\n\nexport default class Timer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            elapsed:0\n        }\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.setState({\n                elapsed: Math.floor(\n                    (new Date().getTime() - this.props.start.getTime()) / 1000\n                )\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        delete this.interval;\n    }\n    \n    render() {\n        const { elapsed } = this.state;\n        return <h2>Time: {elapsed}</h2>\n    }\n}","import React, { Component } from \"react\";\n\nexport default class Result extends Component {\n    render() {\n        const { sudoku } = this.props;\n        const elapsed = Math.floor(\n            (sudoku.solvedTime.getTime() - sudoku.startTime.getTime()) / 1000\n        );\n        const opponent = sudoku.challengerSolvedTime\n            ? Math.floor(\n                (sudoku.challengerSolvedTime - \n                    sudoku.challengerStartTime) / \n                    1000\n            )\n        : null;\n\n        return (\n            <div>\n                <h2>You solved the sudoku in {elapsed} seconds!</h2>\n                {opponent && <h3> Your opponent solved it in {opponent} seconds</h3>}\n                <p>\n                    Challenge a friend:{\" \"}\n                    <a href={sudoku.shareUrl}>Share Link</a>{\" \"}\n                </p>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\"\nimport SudokuField from \"./SudokuField\"\nimport Timer from \"./Timer\";\nimport Result from \"./Result\";\n\nexport default class SudokuBoard extends Component {\n    render() {\n        const { sudoku, onChange } = this.props;\n\n        return (\n            <div>\n                {!sudoku.solvedTime && <Timer start={sudoku.startTime} />}\n                {sudoku.solvedTime && <Result sudoku={sudoku} />}\n                {sudoku.rows.map(row => (\n                    <div className=\"row\" key={row.index}>\n                        {row.cols.map(field => (\n                            <SudokuField field={field} key={field.col} onChange={onChange} /> \n                        ))}\n                    </div>\n                ))}\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport {generateSudoku, checkSolution, shareUrl} from \"./lib/sudoku\";\nimport produce from \"immer\";\nimport SudokuBoard from \"./componenets/SudokuBoard\";\nimport \"./App.css\";\nimport reactDom from \"react-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = produce({}, () => ({\n      sudoku: generateSudoku()\n    }));\n  }\n\n  handleChange = e => {\n    this.setState(\n      produce(state => {\n        state.sudoku.rows[e.row].cols[e.col].value = e.value;\n        if (!state.sudoku.solvedTime) {\n          const solved = checkSolution(state.sudoku);\n          if (solved) {\n            state.sudoku.solvedTime = new Date();\n            state.sudoku.shareUrl = shareUrl(state.sudoku);\n          }\n        }\n      })\n    );\n  };\n\n  solveSudoku = e => {\n    this.setState(\n      produce(state => {\n        state.sudoku.rows.forEach(row => \n          row.cols.forEach(col => {\n            col.value = state.sudoku.solution[col.row * 9 + col.col];\n          })\n        );\n      })\n    );\n  };\n\n  checkSudoku = e => {\n    this.setState(\n      produce(state => {\n        state.sudoku.rows.forEach(row =>\n          row.cols.forEach(col => {\n            if (col.value != state.sudoku.solution[col.row * 9 + col.col]) {\n              col.value = parseInt(\"\")\n            }\n          })\n        );\n      })\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Sudoku</h1>\n          {/* <h4>created by Drew Bozarth</h4> */}\n        </header>\n        <SudokuBoard sudoku={this.state.sudoku} onChange={this.handleChange} />\n\n        <button onClick={this.solveSudoku}>Solve</button>\n        <button onClick={this.checkSudoku}>Check</button>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}